/**
 * AI Chat functionality for Portfolio Management System - Enhanced Version
 */
document.addEventListener('DOMContentLoaded', function() {
    const aiChatButton = document.getElementById('aiChatButton');
    const aiChatPopup = document.getElementById('aiChatPopup');
    const minimizeChat = document.getElementById('minimizeChat');
    const closeChat = document.getElementById('closeChat');
    const chatForm = document.getElementById('chatForm');
    const userMessage = document.getElementById('userMessage');
    const chatMessages = document.getElementById('chatMessages');
    const suggestedItems = document.querySelectorAll('.suggested-item');
    const chatContainer = document.getElementById('chatContainer');
    const suggestedQuestionsSection = document.getElementById('suggestedQuestions');
    
    // Bi·∫øn ƒë·ªÉ l∆∞u t√™n ng∆∞·ªùi d√πng
    let currentUsername = "b·∫°n";
    
    // L·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ th·∫ª meta khi trang ƒë∆∞·ª£c t·∫£i
    const usernameMetaTag = document.querySelector('meta[name="username"]');
    const fullNameMetaTag = document.querySelector('meta[name="user-full-name"]');
    
    if (fullNameMetaTag) {
        const fullName = fullNameMetaTag.getAttribute('content');
        if (fullName && fullName.trim() !== '') {
            currentUsername = fullName;
            console.log("ƒê√£ t√¨m th·∫•y t√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng:", currentUsername);
        }
    } else if (usernameMetaTag) {
        const metaUsername = usernameMetaTag.getAttribute('content');
        if (metaUsername && metaUsername.trim() !== '') {
            currentUsername = metaUsername;
            console.log("Kh√¥ng t√¨m th·∫•y t√™n ƒë·∫ßy ƒë·ªß, s·ª≠ d·ª•ng username:", currentUsername);
        }
    } else {
        console.log("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh:", currentUsername);
    }
    
    let chatHistory = [];
    let isFirstInteraction = true;
    let emojis = ['üëç', '‚ú®', 'üéâ', 'üöÄ', 'üí°', 'üî•', '‚≠ê', 'üòä'];
    
    // L∆∞u tr·ªØ c√¢u tr·∫£ l·ªùi g·∫ßn ƒë√¢y ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
    let recentResponses = [];
    const MAX_RECENT_RESPONSES = 3;
    
    // Th√™m bi·∫øn cho vi·ªác l∆∞u tr·ªØ l·ªãch s·ª≠ chat
    const CHAT_HISTORY_KEY = 'astrobot_chat_history';
    
    // T·∫£i l·ªãch s·ª≠ chat t·ª´ localStorage khi trang ƒë∆∞·ª£c t·∫£i
    if (localStorage.getItem(CHAT_HISTORY_KEY)) {
        try {
            chatHistory = JSON.parse(localStorage.getItem(CHAT_HISTORY_KEY));
            
            // Kh√¥i ph·ª•c tin nh·∫Øn t·ª´ l·ªãch s·ª≠ chat khi m·ªü chat
            document.addEventListener('DOMContentLoaded', function() {
                // ƒê·∫£m b·∫£o chat messages ƒë√£ ƒë∆∞·ª£c t·∫°o
                if (chatMessages) {
                    // Hi·ªÉn th·ªã l·∫°i tin nh·∫Øn t·ª´ l·ªãch s·ª≠ (t·ªëi ƒëa 10 tin nh·∫Øn g·∫ßn nh·∫•t)
                    const messagesToShow = chatHistory.slice(-20); // L·∫•y 20 tin nh·∫Øn g·∫ßn nh·∫•t
                    messagesToShow.forEach(msg => {
                        if (msg.role === 'user' || msg.role === 'assistant') {
                            addMessageFromHistory(msg.content, msg.role === 'user' ? 'user' : 'ai');
                        }
                    });
                }
            });
        } catch (e) {
            console.error('L·ªói khi t·∫£i l·ªãch s·ª≠ chat:', e);
            chatHistory = [];
        }
    }
    
    // Add pulse animation to chat button
    aiChatButton.classList.add('pulse-animation');
    
    // ƒê·∫£m b·∫£o n√∫t chat hi·ªÉn th·ªã ƒë√∫ng c√°ch
    aiChatButton.style.display = 'flex';
    aiChatPopup.style.display = 'none';
    
    // Toggle chat popup with enhanced animations
    aiChatButton.addEventListener('click', function() {
        console.log("Chat button clicked");
        aiChatPopup.style.display = 'flex';
        
        // Add animation after display is set
        setTimeout(() => {
            aiChatPopup.classList.add('show-animation');
            // Stop pulse animation after first click
            if (isFirstInteraction) {
                aiChatButton.classList.remove('pulse-animation');
                isFirstInteraction = false;
            }
        }, 10);
        
        aiChatButton.style.display = 'none';
        
        // Welcome message if first time
        if (chatHistory.length === 0) {
            console.log("Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng l·∫ßn ƒë·∫ßu");
            setTimeout(() => {
                // Thi·∫øt l·∫≠p khung vai tr√≤ cho AI
                chatHistory.push({
                    role: 'system',
                    content: 'B·∫°n h√£y gi·∫£i ƒë√°p m·ªçi th·ª© v·ªÅ T√†i ch√≠nh, Kinh t·∫ø v√† qu·∫£n l√≠ danh m·ª•c ƒë·∫ßu t∆∞, v√† c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn t√†i ch√≠nh cho t√¥i. H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n nh·∫•t nh√©, kh√¥ng r√†ng bu·ªôc c·ª©ng nh·∫Øt.'
                });
                
                // Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng ƒë·∫ßu ti√™n v·ªõi t√™n ng∆∞·ªùi d√πng
                const welcomeMessage = `Xin ch√†o ${currentUsername}! T√¥i l√† tr·ª£ l√Ω AstroBot chuy√™n v·ªÅ t√†i ch√≠nh v√† ƒë·∫ßu t∆∞. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc v·ªÅ ch·ª©ng kho√°n, qu·∫£n l√Ω danh m·ª•c ƒë·∫ßu t∆∞, v√† c√°c v·∫•n ƒë·ªÅ kinh t·∫ø t√†i ch√≠nh. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?`;
                addMessage(welcomeMessage, 'ai');
                recentResponses.push(welcomeMessage);
                
                // L∆∞u l·ªãch s·ª≠ chat
                saveHistory();
            }, 500);
        } else if (chatMessages.children.length === 0) {
            // N·∫øu chatHistory c√≥ d·ªØ li·ªáu nh∆∞ng kh√¥ng c√≥ tin nh·∫Øn hi·ªÉn th·ªã
            // (c√≥ th·ªÉ x·∫£y ra khi localStorage c√≥ d·ªØ li·ªáu nh∆∞ng kh√¥ng hi·ªÉn th·ªã)
            console.log("Hi·ªÉn th·ªã l·∫°i tin nh·∫Øn ch√†o m·ª´ng");
            setTimeout(() => {
                const welcomeMessage = `Xin ch√†o ${currentUsername}! T√¥i l√† tr·ª£ l√Ω AstroBot chuy√™n v·ªÅ t√†i ch√≠nh v√† ƒë·∫ßu t∆∞. T√¥i c√≥ th·ªÉ ti·∫øp t·ª•c gi√∫p b·∫°n gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc v·ªÅ t√†i ch√≠nh v√† ƒë·∫ßu t∆∞. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?`;
                addMessage(welcomeMessage, 'ai');
            }, 500);
        }
        
        // Scroll to the bottom of the chat messages
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Focus the input field
        setTimeout(() => {
            userMessage.focus();
        }, 300);
    });
    
    // Minimize chat with animation
    minimizeChat.addEventListener('click', function() {
        minimizeChatWithAnimation();
    });
    
    // Close chat with animation
    closeChat.addEventListener('click', function() {
        minimizeChatWithAnimation();
    });
    
    // Th√™m s·ª± ki·ªán double-click cho n√∫t ƒë√≥ng chat ƒë·ªÉ x√≥a l·ªãch s·ª≠
    closeChat.addEventListener('dblclick', function() {
        console.log("ƒêang x√≥a l·ªãch s·ª≠ chat...");
        // X√≥a l·ªãch s·ª≠ t·ª´ localStorage
        localStorage.removeItem(CHAT_HISTORY_KEY);
        // X√≥a l·ªãch s·ª≠ t·ª´ b·ªô nh·ªõ
        chatHistory = [];
        // X√≥a tin nh·∫Øn hi·ªÉn th·ªã
        chatMessages.innerHTML = '';
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        alert("L·ªãch s·ª≠ chat ƒë√£ ƒë∆∞·ª£c x√≥a. L·∫ßn sau khi b·∫°n m·ªü chat, b·∫°n s·∫Ω th·∫•y tin nh·∫Øn ch√†o m·ª´ng m·ªõi.");
        
        // ƒê√≥ng chat
        minimizeChatWithAnimation();
    });
    
    function minimizeChatWithAnimation() {
        console.log("Minimizing chat");
        // First remove the animation class
        aiChatPopup.classList.remove('show-animation');
        
        // Then hide after animation completes
        setTimeout(() => {
            aiChatPopup.style.display = 'none';
            
            // Animate the chat button appearing again
            aiChatButton.style.display = 'flex';
            aiChatButton.style.transform = 'scale(0.8)';
            setTimeout(() => {
                aiChatButton.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    aiChatButton.style.transform = '';
                }, 200);
            }, 100);
            
        }, 300);
    }
    
    // Th√™m s·ª± ki·ªán ch·∫°m/nh·∫•n cho thi·∫øt b·ªã di ƒë·ªông
    aiChatButton.addEventListener('touchstart', function(e) {
        e.preventDefault();
        aiChatButton.click();
    });
    
    // ·∫®n ph·∫ßn g·ª£i √Ω khi ng∆∞·ªùi d√πng nh·∫≠p n·ªôi dung
    userMessage.addEventListener('input', function() {
        if (this.value.trim() !== '' && chatHistory.length <= 1) {
            suggestedQuestionsSection.style.display = 'none';
        } else if (this.value.trim() === '' && chatHistory.length <= 1) {
            suggestedQuestionsSection.style.display = 'block';
        }
    });
    
    // Handle suggested questions with enhanced interaction
    suggestedItems.forEach(item => {
        item.addEventListener('click', function() {
            const question = this.getAttribute('data-question');
            userMessage.value = question;
            
            // Add ripple effect
            createRippleEffect(this);
            
            // Hide the suggested questions section
            if (suggestedQuestionsSection) {
                suggestedQuestionsSection.style.display = 'none';
            }
            
            // Submit the form
            const event = new Event('submit', {
                'bubbles': true,
                'cancelable': true
            });
            chatForm.dispatchEvent(event);
        });
    });
    
    function createRippleEffect(element) {
        const ripple = document.createElement('span');
        ripple.classList.add('ripple');
        
        const rect = element.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        
        ripple.style.width = ripple.style.height = `${size}px`;
        ripple.style.left = `${event.clientX - rect.left - size/2}px`;
        ripple.style.top = `${event.clientY - rect.top - size/2}px`;
        
        element.appendChild(ripple);
        
        setTimeout(() => {
            ripple.remove();
        }, 600);
    }
    
    // Handle sending messages with emoji reactions
    chatForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const message = userMessage.value.trim();
        if (message) {
            // Add user message to chat
            addMessage(message, 'user');
            userMessage.value = '';
            
            // Show random emoji reaction
            showEmojiReaction();
            
            // Show enhanced typing indicator
            showEnhancedTypingIndicator();
            
            // Call API
            callGeminiAPI(message);
        }
    });
    
    // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n ph√≠m Enter ƒë·ªÉ g·ª≠i tin nh·∫Øn
    userMessage.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            chatForm.dispatchEvent(new Event('submit'));
        }
    });
    
    function showEmojiReaction() {
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
        const emojiEl = document.createElement('div');
        emojiEl.className = 'emoji-reaction';
        emojiEl.textContent = randomEmoji;
        
        // Position the emoji near the send button
        const rect = chatForm.getBoundingClientRect();
        emojiEl.style.left = `${rect.right - 40}px`;
        emojiEl.style.top = `${rect.top}px`;
        
        document.body.appendChild(emojiEl);
        
        // Remove after animation
        setTimeout(() => {
            emojiEl.remove();
        }, 1500);
    }
    
    function addMessage(message, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message-container ${sender === 'user' ? 'user-container' : 'ai-container'}`;
        
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        
        if (sender === 'ai') {
            // X·ª≠ l√Ω Markdown cho tin nh·∫Øn AI
            const formattedContent = parseMarkdown(message);
            messageContent.innerHTML = formattedContent;
            messageContent.classList.add(sender + '-message');
        } else {
            // ƒê·ªëi v·ªõi tin nh·∫Øn ng∆∞·ªùi d√πng, hi·ªÉn th·ªã text th√¥ng th∆∞·ªùng
            const messageParagraph = document.createElement('p');
            messageParagraph.textContent = message;
            messageContent.appendChild(messageParagraph);
            messageContent.classList.add(sender + '-message');
        }
        
        messageDiv.appendChild(messageContent);
        chatMessages.appendChild(messageDiv);
        
        // Add to chat history
        chatHistory.push({
            role: sender === 'user' ? 'user' : 'assistant',
            content: message
        });
        
        // L∆∞u l·ªãch s·ª≠ chat
        saveHistory();
        
        // Scroll to bottom with smooth animation
        smoothScrollToBottom(chatMessages);
    }
    
    // H√†m th√™m tin nh·∫Øn v√†o chatbox khi kh√¥i ph·ª•c t·ª´ l·ªãch s·ª≠
    function addMessageFromHistory(message, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message-container ${sender === 'user' ? 'user-container' : 'ai-container'}`;
        
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';
        
        if (sender === 'ai') {
            // X·ª≠ l√Ω Markdown cho tin nh·∫Øn AI
            const formattedContent = parseMarkdown(message);
            messageContent.innerHTML = formattedContent;
            messageContent.classList.add(sender + '-message');
        } else {
            // ƒê·ªëi v·ªõi tin nh·∫Øn ng∆∞·ªùi d√πng, hi·ªÉn th·ªã text th√¥ng th∆∞·ªùng
            const messageParagraph = document.createElement('p');
            messageParagraph.textContent = message;
            messageContent.appendChild(messageParagraph);
            messageContent.classList.add(sender + '-message');
        }
        
        messageDiv.appendChild(messageContent);
        chatMessages.appendChild(messageDiv);
    }
    
    // L∆∞u l·ªãch s·ª≠ chat v√†o localStorage
    function saveHistory() {
        try {
            // Gi·ªõi h·∫°n l·ªãch s·ª≠ chat ·ªü 50 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh l·ªói localStorage
            const limitedHistory = chatHistory.slice(-50);
            localStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(limitedHistory));
        } catch (e) {
            console.error('L·ªói khi l∆∞u l·ªãch s·ª≠ chat:', e);
        }
    }
    
    // Ph√¢n t√≠ch c√∫ ph√°p Markdown ƒë∆°n gi·∫£n
    function parseMarkdown(text) {
        let result = text;
        
        // Th√™m class highlight cho c√°c t·ª´ kh√≥a quan tr·ªçng trong d·∫•u ==
        result = result.replace(/==(.*?)==/g, '<span class="highlight">$1</span>');
        
        // X·ª≠ l√Ω s·ªë li·ªáu v·ªõi ƒë·ªãnh d·∫°ng [s·ªë]
        result = result.replace(/\[([0-9.,]+)\]/g, '<span class="number">$1</span>');
        
        // X·ª≠ l√Ω ƒë·∫≠m (bold) - h·ªó tr·ª£ c·∫£ **text** v√† __text__
        result = result.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        result = result.replace(/__(.*?)__/g, '<strong>$1</strong>');
        
        // X·ª≠ l√Ω nghi√™ng (italic) - h·ªó tr·ª£ c·∫£ *text* v√† _text_
        result = result.replace(/\*([^\*]+)\*/g, '<em>$1</em>');
        result = result.replace(/_([^_]+)_/g, '<em>$1</em>');
        
        // X·ª≠ l√Ω ti√™u ƒë·ªÅ - th√™m styles cho ti√™u ƒë·ªÅ
        result = result.replace(/^### (.*?)$/gm, '<h3 class="markdown-heading">$1</h3>');
        result = result.replace(/^## (.*?)$/gm, '<h2 class="markdown-heading">$1</h2>');
        result = result.replace(/^# (.*?)$/gm, '<h1 class="markdown-heading">$1</h1>');
        
        // X·ª≠ l√Ω danh s√°ch kh√¥ng th·ª© t·ª± v·ªõi hi·ªáu ·ª©ng ƒë·∫πp h∆°n
        result = result.replace(/^\* (.*?)$/gm, '<li class="markdown-list-item">$1</li>');
        result = result.replace(/^- (.*?)$/gm, '<li class="markdown-list-item">$1</li>');
        
        // B·ªçc danh s√°ch trong th·∫ª <ul> v·ªõi class
        result = result.replace(/<li class="markdown-list-item">(.*?)<\/li>(?:\s*<li class="markdown-list-item">.*?<\/li>)*/g, '<ul class="markdown-list">$&</ul>');
        
        // X·ª≠ l√Ω danh s√°ch c√≥ th·ª© t·ª± v·ªõi counter
        result = result.replace(/^\d+\. (.*?)$/gm, '<li class="markdown-list-item-ordered">$1</li>');
        
        // B·ªçc danh s√°ch c√≥ th·ª© t·ª± trong th·∫ª <ol> v·ªõi class
        result = result.replace(/<li class="markdown-list-item-ordered">(.*?)<\/li>(?:\s*<li class="markdown-list-item-ordered">.*?<\/li>)*/g, '<ol class="markdown-list-ordered">$&</ol>');
        
        // X·ª≠ l√Ω ƒëo·∫°n tr√≠ch d·∫´n v·ªõi hi·ªáu ·ª©ng ƒë·∫πp
        result = result.replace(/^> (.*?)$/gm, '<blockquote class="markdown-blockquote">$1</blockquote>');
        
        // X·ª≠ l√Ω ƒëo·∫°n code v·ªõi styles
        result = result.replace(/`(.*?)`/g, '<code class="markdown-code">$1</code>');
        
        // X·ª≠ l√Ω b·∫£ng ƒë∆°n gi·∫£n
        // Nh·∫≠n d·∫°ng to√†n b·ªô b·∫£ng
        const tableRegex = /^\|(.*)\|[\r\n]\|([-|:]*)[\r\n]((?:\|.*\|[\r\n]?)*)/gm;
        result = result.replace(tableRegex, function(match, headerRow, separatorRow, bodyRows) {
            // X·ª≠ l√Ω header
            const headers = headerRow.split('|').map(cell => cell.trim()).filter(Boolean);
            let headerHTML = '<tr>';
            headers.forEach(header => {
                headerHTML += `<th>${header}</th>`;
            });
            headerHTML += '</tr>';
            
            // X·ª≠ l√Ω body
            const rows = bodyRows.trim().split('\n');
            let bodyHTML = '';
            rows.forEach(row => {
                if (row.trim() === '') return;
                const cells = row.split('|').map(cell => cell.trim()).filter(Boolean);
                bodyHTML += '<tr>';
                cells.forEach(cell => {
                    bodyHTML += `<td>${cell}</td>`;
                });
                bodyHTML += '</tr>';
            });
            
            return `<table><thead>${headerHTML}</thead><tbody>${bodyHTML}</tbody></table>`;
        });
        
        // X·ª≠ l√Ω li√™n k·∫øt v·ªõi hi·ªáu ·ª©ng hover
        result = result.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" class="markdown-link">$1</a>');
        
        // X·ª≠ l√Ω xu·ªëng d√≤ng v·ªõi padding
        result = result.replace(/\n\n/g, '<div class="markdown-paragraph-break"></div>');
        result = result.replace(/\n/g, '<br>');
        
        // X·ª≠ l√Ω card th√¥ng tin
        result = result.replace(/\[info\](.*?)\[\/info\]/gs, '<div class="card-info">$1</div>');
        result = result.replace(/\[warning\](.*?)\[\/warning\]/gs, '<div class="card-warning">$1</div>');
        result = result.replace(/\[success\](.*?)\[\/success\]/gs, '<div class="card-success">$1</div>');
        
        return result;
    }
    
    function smoothScrollToBottom(element) {
        const start = element.scrollTop;
        const end = element.scrollHeight - element.clientHeight;
        const duration = 300; // ms
        const startTime = performance.now();
        
        function scrollStep(timestamp) {
            const elapsed = timestamp - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
            
            element.scrollTop = start + (end - start) * easeProgress;
            
            if (elapsed < duration) {
                window.requestAnimationFrame(scrollStep);
            }
        }
        
        window.requestAnimationFrame(scrollStep);
    }
    
    function showEnhancedTypingIndicator() {
        // Remove any existing typing indicators
        removeTypingIndicator();
        
        const typingContainer = document.createElement('div');
        typingContainer.className = 'message-container ai-container';
        typingContainer.id = 'typingIndicator';
        
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message ai-message typing-message';
        
        // Create modern animated dots for typing indicator
        const typingIndicator = document.createElement('div');
        typingIndicator.className = 'typing-indicator';
        
        // Add three animated dots
        for (let i = 0; i < 3; i++) {
            const dot = document.createElement('span');
            dot.className = 'typing-dot';
            typingIndicator.appendChild(dot);
        }
        
        typingDiv.appendChild(typingIndicator);
        typingContainer.appendChild(typingDiv);
        chatMessages.appendChild(typingContainer);
        
        // Scroll to the typing indicator
        smoothScrollToBottom(chatMessages);
    }
    
    function removeTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    // H√†m g·ªçi API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ m√¥ h√¨nh AI
    async function callGeminiAPI(message) {
        // Hi·ªÉn th·ªã typing indicator
        showEnhancedTypingIndicator();
        
        try {
            // Chu·∫©n b·ªã d·ªØ li·ªáu cho API
            const requestData = {
                message: message,
                history: chatHistory
            };
            
            // Th·ª±c hi·ªán cu·ªôc g·ªçi API ƒë·∫øn backend
            const response = await fetch('/api/ai-chat/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            });
            
            // Ki·ªÉm tra n·∫øu cu·ªôc g·ªçi th√†nh c√¥ng
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            
            // L·∫•y d·ªØ li·ªáu t·ª´ API
            const data = await response.json();
            
            // X√≥a typing indicator
            removeTypingIndicator();
            
            // Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi t·ª´ API
            addMessage(data.response, 'ai');
            
        } catch (error) {
            console.error('Error calling AI API:', error);
            
            // X√≥a typing indicator
            removeTypingIndicator();
            
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
            addMessage("R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.", 'ai');
        }
    }
}); 